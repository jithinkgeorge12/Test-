import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestBuilders.*;
import static org.springframework.security.test.web.servlet.response.SecurityMockMvcResultMatchers.*;

@RunWith(SpringRunner.class)
@ContextConfiguration
public class SecurityFilterChainTest {

    @Autowired
    private SecurityFilterChain checkSecurityFilterChain;

    @Test
    public void testSecurityFilterChain() throws Exception {
        // Test public endpoint accessible by anyone
        mockMvc.perform(get("/public"))
                .andExpect(status().isOk());

        // Test secure endpoint requires authentication
        mockMvc.perform(get("/secure"))
                .andExpect(status().isUnauthorized());

        // Test secure endpoint with authenticated user
        mockMvc.perform(get("/secure")
                .with(httpBasic("username", "password")))
                .andExpect(status().isOk());
    }

    @Configuration
    @EnableWebSecurity
    @Import(SecurityFilterAutoConfiguration.class)
    public static class TestSecurityConfig {

        @Bean
        public SecurityFilterChain checkSecurityFilterChain(HttpSecurity http) throws Exception {
            http
                .authorizeRequests(authorizeRequests ->
                    authorizeRequests
                        .antMatchers("/public").permitAll()
                        .anyRequest().authenticated()
                )
                .httpBasic(withDefaults());
            return http.build();
        }
    }
}

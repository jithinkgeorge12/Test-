import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestBuilders.*;
import static org.springframework.security.test.web.servlet.response.SecurityMockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@ContextConfiguration
public class SecurityFilterChainTest {

    @Autowired
    private SecurityFilterChain checkSecurityFilterChain;

    private MockMvc mockMvc;

    @Before
    public void setUp() {
        mockMvc = MockMvcBuilders.standaloneSetup().apply(springSecurity()).build();
    }

    @Test
    public void testSecurityFilterChain() throws Exception {
        mockMvc.perform(get("/public"))
                .andExpect(status().isOk());

        mockMvc.perform(get("/secure"))
                .andExpect(status().isUnauthorized());

        mockMvc.perform(get("/secure")
                .with(httpBasic("username", "password")))
                .andExpect(status().isOk());
    }

    @Configuration
    @Import(SecurityFilterChainConfig.class) // Import the main security configuration class
    public static class TestSecurityConfig {
        // You can leave this empty. The main SecurityFilterChainConfig will be used.
    }
}

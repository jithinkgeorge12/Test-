package com.example.curlapi.model;

public class CurlConnectivityResponse {

    private String output;  // Output from the curl command
    private String message; // A message that gives context (success, failure)
    private int statusCode; // HTTP status code for the response

    // Constructor
    public CurlConnectivityResponse(String output, String message, int statusCode) {
        this.output = output;
        this.message = message;
        this.statusCode = statusCode;
    }

    // Getters and setters
    public String getOutput() {
        return output;
    }

    public void setOutput(String output) {
        this.output = output;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public int getStatusCode() {
        return statusCode;
    }

    public void setStatusCode(int statusCode) {
        this.statusCode = statusCode;
    }
}










package com.example.curlapi.service;

import com.example.curlapi.model.CurlConnectivityResponse;
import org.springframework.stereotype.Service;
import java.io.BufferedReader;
import java.io.InputStreamReader;

@Service
public class CurlConnectivityService {

    // Method to execute the curl command and return a structured response
    public CurlConnectivityResponse executeCurl(String curlCommand) {
        if (curlCommand == null || curlCommand.isEmpty() || !curlCommand.startsWith("curl")) {
            throw new IllegalArgumentException("Invalid curl command");
        }

        try {
            // Build the command
            ProcessBuilder processBuilder = new ProcessBuilder();
            processBuilder.command("bash", "-c", curlCommand);

            // Start the process
            Process process = processBuilder.start();

            // Capture output
            StringBuilder result = new StringBuilder();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            String line;
            while ((line = reader.readLine()) != null) {
                result.append(line).append("\n");
            }

            // Wait for the process to finish
            int exitCode = process.waitFor();
            if (exitCode != 0) {
                throw new RuntimeException("Failed to execute curl command. Exit code: " + exitCode);
            }

            // Return successful response
            return new CurlConnectivityResponse(result.toString(), "Curl executed successfully", 200);
        } catch (Exception ex) {
            throw new RuntimeException("Error occurred while executing curl command: " + ex.getMessage(), ex);
        }
    }
}




















package com.example.curlapi.controller;

import com.example.curlapi.model.CurlConnectivityResponse;
import com.example.curlapi.service.CurlConnectivityService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1/curl")
public class CurlConnectivityController {

    private final CurlConnectivityService curlConnectivityService;

    public CurlConnectivityController(CurlConnectivityService curlConnectivityService) {
        this.curlConnectivityService = curlConnectivityService;
    }

    // POST endpoint to accept the curl command
    @PostMapping("/execute")
    public ResponseEntity<CurlConnectivityResponse> executeCurlCommand(@RequestParam("curlCommand") String curlCommand) {
        try {
            // Process the curl command using the service
            CurlConnectivityResponse response = curlConnectivityService.executeCurl(curlCommand);
            return ResponseEntity.ok(response);
        } catch (IllegalArgumentException ex) {
            // Handle invalid curl command
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new CurlConnectivityResponse(null, ex.getMessage(), HttpStatus.BAD_REQUEST.value()));
        } catch (Exception ex) {
            // Handle general errors
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new CurlConnectivityResponse(null, "An error occurred while executing the command", HttpStatus.INTERNAL_SERVER_ERROR.value()));
        }
    }
}

package com.example;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.FilterType;

@Configuration
@ComponentScan(
    basePackages = "com.example",
    excludeFilters = {
        @ComponentScan.Filter(type = FilterType.CUSTOM, classes = CustomComponentFilter.class)
    }
)
public class TestConfig {
    // Configuration for testing
}
CustomComponentFilter.java:

java
Copy code
package com.example;

import org.springframework.core.type.classreading.MetadataReader;
import org.springframework.core.type.classreading.MetadataReaderFactory;
import org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter;
import org.springframework.core.type.filter.TypeFilter;

import java.io.IOException;

public class CustomComponentFilter extends AbstractTypeHierarchyTraversingFilter {

    public CustomComponentFilter() {
        super(true, true);
    }

    @Override
    protected boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException {
        String className = metadataReader.getClassMetadata().getClassName();
        return className.equals("com.example.ProblematicBean1") ||
               className.equals("com.otherpackage.ProblematicBean2"); // Replace with the actual package and class name
    }
}

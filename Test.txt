-- Create the notification table with partitioning and indexing
CREATE TABLE notification_table (
    notification_id NUMBER PRIMARY KEY,
    created_date DATE,
    -- other columns
)
PARTITION BY RANGE (created_date)
INTERVAL(NUMTOYMINTERVAL(6, 'MONTH'))
(
    PARTITION notifications_initial VALUES LESS THAN (TO_DATE('01-JAN-2024', 'DD-MON-YYYY'))
);

-- Create a procedure for automatic archiving every 1 year for the notification table
CREATE OR REPLACE PROCEDURE archive_data_notification IS
BEGIN
    -- Create a new partition for archived data
    EXECUTE IMMEDIATE 'ALTER TABLE notification_table ADD PARTITION notifications_archive VALUES LESS THAN (SYSTIMESTAMP - INTERVAL ''1'' YEAR)';
    
    -- Move data to the archive partition
    EXECUTE IMMEDIATE 'INSERT INTO notification_table PARTITION (notifications_archive) SELECT * FROM notification_table WHERE created_date < (SYSTIMESTAMP - INTERVAL ''1'' YEAR)';
    
    -- Delete the moved data from the main table
    EXECUTE IMMEDIATE 'DELETE FROM notification_table WHERE created_date < (SYSTIMESTAMP - INTERVAL ''1'' YEAR)';
    
    -- Commit the changes
    COMMIT;
END archive_data_notification;
/

-- Schedule the archiving procedure to run automatically every 1 year for the notification table
BEGIN
    DBMS_SCHEDULER.create_job (
        job_name        => 'ARCHIVE_JOB_NOTIFICATION',
        job_type        => 'PLSQL_BLOCK',
        job_action      => 'BEGIN archive_data_notification; END;',
        start_date      => TO_TIMESTAMP_TZ('2024-01-01 00:00:00.0 -08:00', 'YYYY-MM-DD HH24:MI:SS.FF TZD'),
        repeat_interval => 'FREQ=YEARLY; BYMONTH=1; BYMONTHDAY=1; BYHOUR=0; BYMINUTE=0; BYSECOND=0',
        enabled         => TRUE
    );
END;
/

-- Create the archive table with indexing for the notification table
CREATE TABLE notification_table_archive (
    notification_id NUMBER PRIMARY KEY,
    created_date DATE,
    -- other columns
)
TABLESPACE your_archive_tablespace_name_notification; -- Specify your archive tablespace name if needed;

-- Commit the changes for the notification table
COMMIT;
Rollback Notification Table:

sql
Copy code
-- Rollback script for the notification table
BEGIN
    DBMS_SCHEDULER.drop_job('ARCHIVE_JOB_NOTIFICATION');
END;
/

-- Drop the notification table archive
DROP TABLE notification_table_archive;

-- Drop the main notification table
DROP TABLE notification_table;

-- Commit the changes
COMMIT;

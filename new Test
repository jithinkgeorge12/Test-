import * as XLSX from 'xlsx';

const Download = {
  generateExcel: (rawData, fundGroup) => {
    const sortedGroup = sortGroup(fundGroup); // Sort fundGroup alphabetically

    const dataForDownload = prepareDataForDownload(rawData, sortedGroup);

    downloadExcel(dataForDownload);
  }
};

const sortGroup = (fundGroup) => {
  return fundGroup.sort((a, b) => a.localeCompare(b));
};

const prepareDataForDownload = (rawData, fundGroup) => {
  let data = [];

  rawData.forEach((item, index) => {
    fundGroup.forEach((code, idx) => {
      if (item.code === code) {
        const ref = `a${data.length + 1}`.padStart(9, '0'); // Adjusted ref format
        const date = new Date(item.date);
        const formattedDate = `${('0' + date.getDate()).slice(-2)}${('0' + (date.getMonth() + 1)).slice(-2)}${String(date.getFullYear()).slice(-2)}`; // Formatted date as ddmmyy

        const row = {
          ref,
          code,
          date: formattedDate,
          valuation: 0,
        };

        data.push(row);
      }
    });
  });

  return data;
};

const downloadExcel = (data) => {
  const wb = generateWorkbook(data);
  const wbout = writeWorkbook(wb);

  triggerDownload(wbout);
};

const generateWorkbook = (data) => {
  const wb = {
    SheetNames: ['Sheet1'],
    Sheets: {
      'Sheet1': generateWorksheet(data),
    },
  };
  return wb;
};

const generateWorksheet = (data) => {
  return XLSX.utils.json_to_sheet(data);
};

const writeWorkbook = (wb) => {
  return XLSX.write(wb, { bookType: 'xls', type: 'array' });
};

const triggerDownload = (wbout) => {
  const blob = new Blob([wbout], { type: 'application/vnd.ms-excel' });
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'D24.xls'; // Set the filename here

  document.body.appendChild(a);
  a.click();

  setTimeout(() => {
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  }, 0);
};

export default Download;

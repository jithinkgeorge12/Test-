import * as XLSX from 'xlsx';

const Download = {
  generateExcel: (rawData, fundGroup) => {
    const sortedData = sortData(rawData, fundGroup); // Sort rawData by fundGroup

    const dataForDownload = prepareDataForDownload(sortedData);

    downloadExcel(dataForDownload);
  }
};

const sortData = (rawData, fundGroup) => {
  // Sort rawData by fundGroup
  return rawData.sort((a, b) => {
    if (fundGroup.indexOf(a.code) < fundGroup.indexOf(b.code)) return -1;
    if (fundGroup.indexOf(a.code) > fundGroup.indexOf(b.code)) return 1;
    return 0;
  });
};

const prepareDataForDownload = (sortedData) => {
  let data = [];

  sortedData.forEach((item, index) => {
    const ref = `a${index + 1}`.padStart(9, '0'); // Adjusted ref format
    const date = new Date(item.date);
    const formattedDate = `${('0' + date.getDate()).slice(-2)}${('0' + (date.getMonth() + 1)).slice(-2)}${String(date.getFullYear()).slice(-2)}`; // Formatted date as ddmmyy

    const row = {
      ref,
      code: item.code,
      date: formattedDate,
      valuation: 0,
    };

    data.push(row);
  });

  return data;
};

const downloadExcel = (data) => {
  const wb = generateWorkbook(data);
  const wbout = writeWorkbook(wb);

  triggerDownload(wbout);
};

const generateWorkbook = (data) => {
  const ws = XLSX.utils.json_to_sheet(data);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');
  return wb;
};

const writeWorkbook = (wb) => {
  return XLSX.write(wb, { bookType: 'xls', type: 'array' });
};

const triggerDownload = (wbout) => {
  const blob = new Blob([wbout], { type: 'application/vnd.ms-excel' });
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'D24.xls'; // Set the filename here

  document.body.appendChild(a);
  a.click();

  setTimeout(() => {
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  }, 0);
};

export default Download;

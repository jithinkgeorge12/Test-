import * as XLSX from 'xlsx';

const Download = {
  generateExcel: (rawdata, group) => {
    console.log('rawdata:', rawdata);
    console.log('group:', group);

    const sortedGroup = sortGroup(group); // Sort group alphabetically
    console.log('Sorted group:', sortedGroup);

    const dataForDownload = prepareDataForDownload(rawdata, sortedGroup);
    console.log('Data for download:', dataForDownload);

    if (dataForDownload.length > 0) {
      downloadExcel(dataForDownload);
    } else {
      console.error('No data found for download.');
    }
  }
};

const sortGroup = (group) => {
  return group.sort((a, b) => a.localeCompare(b));
};

const prepareDataForDownload = (rawdata, group) => {
  let data = [];

  rawdata.forEach((item, index) => {
    console.log('Processing item:', item);

    group.forEach((code) => {
      console.log('Processing code:', code);

      if (item.location === 'IRELAND' && item.code === code) {
        const ref = `a${data.length + 1}`.padStart(9, '0');
        console.log('Ref:', ref);

        const date = new Date(item.date);
        console.log('Raw date:', date);

        if (!isNaN(date.getTime())) {
          const formattedDate = `${('0' + date.getDate()).slice(-2)}${('0' + (date.getMonth() + 1)).slice(-2)}${String(date.getFullYear()).slice(-2)}`;
          console.log('Formatted date:', formattedDate);

          const row = {
            ref,
            code,
            date: formattedDate,
            valuation: 0,
          };

          data.push(row);
        } else {
          console.warn(`Invalid date format found for item:`, item);
        }
      }
    });
  });

  return data;
};

const downloadExcel = (data) => {
  console.log('Generating Excel with data:', data);

  const wb = generateWorkbook(data);
  const wbout = writeWorkbook(wb);

  triggerDownload(wbout);
};

const generateWorkbook = (data) => {
  const ws = XLSX.utils.json_to_sheet(data);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');
  return wb;
};

const writeWorkbook = (wb) => {
  return XLSX.write(wb, { bookType: 'xls', type: 'array' });
};

const triggerDownload = (wbout) => {
  const blob = new Blob([wbout], { type: 'application/vnd.ms-excel' });
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'D24.xls'; // Set the filename here

  document.body.appendChild(a);
  a.click();

  setTimeout(() => {
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  }, 0);
};

export default Download;

import * as XLSX from 'xlsx';

const Download = {
  generateExcel: (rawData, fundGroup) => {
    console.log('rawData:', rawData);
    console.log('fundGroup:', fundGroup);

    const sortedFundGroup = sortFundGroup(fundGroup); // Sort fundGroup alphabetically
    console.log('Sorted fundGroup:', sortedFundGroup);

    const dataForDownload = prepareDataForDownload(rawData, sortedFundGroup);
    console.log('Data for download:', dataForDownload);

    if (dataForDownload.length > 0) {
      downloadExcel(dataForDownload);
    } else {
      console.error('No data found for download.');
    }
  }
};

const sortFundGroup = (fundGroup) => {
  return fundGroup.sort((a, b) => a.localeCompare(b));
};

const prepareDataForDownload = (rawData, fundGroup) => {
  let data = [];

  fundGroup.forEach((code) => {
    rawData.forEach((item, index) => {
      const date = new Date(item.dates);
      console.log('Raw date:', date);

      if (!isNaN(date.getTime())) {
        const formattedDate = `${('0' + date.getDate()).slice(-2)}${('0' + (date.getMonth() + 1)).slice(-2)}${String(date.getFullYear()).slice(-2)}`;
        console.log('Formatted date:', formattedDate);

        const ref = `a${(data.length + 1).toString().padStart(8, '0')}`;
        console.log('Ref:', ref);

        const row = {
          ref,
          code,
          date: formattedDate,
          valuation: 0,
        };

        data.push(row);
      } else {
        console.warn(`Invalid date format found for item:`, item);
      }
    });
  });

  return data;
};

const downloadExcel = (data) => {
  console.log('Generating Excel with data:', data);

  const wb = generateWorkbook(data);
  const wbout = writeWorkbook(wb);

  triggerDownload(wbout);
};

const generateWorkbook = (data) => {
  const ws = XLSX.utils.json_to_sheet(data);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');
  return wb;
};

const writeWorkbook = (wb) => {
  return XLSX.write(wb, { bookType: 'xls', type: 'array' });
};

const triggerDownload = (wbout) => {
  const blob = new Blob([wbout], { type: 'application/vnd.ms-excel' });
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'D24.xls'; // Set the filename here

  document.body.appendChild(a);
  a.click();

  setTimeout(() => {
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  }, 0);
};

export default Download;
